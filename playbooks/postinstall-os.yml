- name: Initially set up a Raspberry Pi with an HifiBerry shield as Airplay device
  hosts: all

  pre_tasks:
    - name: Check for Ansible version > 2.3
      assert:
        that: "ansible_version.full is version_compare('2.3', '>=')"
        msg: "This playbook requires Ansible version 2.3 or greater."



  vars_prompt:
    - name: "hostname"
      prompt: "    Set device hostname (leave blank to skip)"
      private: no

    - name: "ssid"
      prompt: "  Wi-fi SSID to connect (leave blank to skip)"
      private: no

    - name: "psk"
      prompt: "Wi-fi passphrase (leave blank if none needed)"
      private: no



  tasks:
    - name: Remove default user (if present)
      user:
        name: pi
        state: absent
        force: yes
        remove: yes
      become: yes

    # Perform apt update
    - name: Updating apt repositories
      become: yes
      apt:
        update_cache: yes

    # Peform apt dist-upgrade and clean up afterwards
    - name: Update all software packages installed by apt
      become: yes
      apt:
        upgrade: dist
        autoclean: yes
        autoremove: yes

    - name: Install some software packages to make your life easier ;-)
      become: true
      apt:
        name: vim,git,rpi-update,tmux

    # Update the RPi's firmware using the rpi-update script
    - name: Update RaspberryPi firmware
      become: true
      command: /usr/bin/rpi-update
      register: firmware
      ignore_errors: true

    - name: Set host name
      become: yes
      hostname:
        name: "{{ hostname }}"
      when: hostname|default("") != ""

    - name: Update /etc/hosts
      become: yes
      lineinfile:
        path: /etc/hosts
        regexp: '^127.0.0.1'
        line: '127.0.0.1    {{ hostname }}'
      when: hostname|default("") != ""

    - name: Create WPA supplicant configuration file
      become: yes
      template:
        src: files/wpa_supplicant.conf.j2
        dest: /etc/wpa_supplicant/wpa_supplicant.conf
        owner: root
        group: root
        mode: 0644
      when: ssid|default("") != ""

    - name: Configure Raspberry to boot to console
      become: yes
      command: systemctl set-default multi-user.target

    - name: Minimize memory available for GPU
      become: yes
      lineinfile:
        path: /boot/config.txt
        regexp: '^gpu_mem='
        line: 'gpu_mem=16'


    # Expand the rootfs to use the complete SD card
    # https://github.com/charleskorn/raspi-expanded-rootfs/blob/master/tasks/main.yml
    - name: Expand filesystem to fill disk
      command: raspi-config --expand-rootfs
      # when: unpartitioned.stdout != "0.00GB"


    # Restart the devices only if new Linux kernel or new software has been installed
    - name: Restart device
      include_tasks: "tasks/reboot.yml"
